name: Build and Release to GHCR

# Workflow for building and releasing agent-control-plane Docker images to GitHub Container Registry
#
# Manual workflow dispatch only - similar to SDK's PyPI release process
# No automatic triggers on push/merge/tag

on:
  # Manual trigger ONLY - no automatic builds
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.3.0 or v0.3.0)'
        required: true
      push:
        description: 'Push to registry'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      tag_release:
        description: 'Create git tag and GitHub release (only if push is true)'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  # Will be agentsystems/agent-control-plane

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      docker_tags: ${{ steps.tags.outputs.tags }}
      should_push: ${{ steps.push.outputs.should_push }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for git describe

      - name: Determine version
        id: version
        run: |
          # Use workflow input (required)
          VERSION="${{ github.event.inputs.version }}"

          # Normalize version (remove 'v' prefix for Docker tags if present)
          DOCKER_VERSION="${VERSION#v}"

          # Safety check: test releases should have suffix (rc, beta, alpha, etc.)
          if [[ "${{ github.event.inputs.push }}" == "true" ]] && [[ "${{ github.event.inputs.tag_release }}" == "false" ]]; then
            if [[ ! "${DOCKER_VERSION}" =~ - ]]; then
              echo "‚ùå ERROR: Test releases must have a suffix (e.g., 0.3.2-rc1, 0.3.2-beta)"
              echo "   You entered: ${DOCKER_VERSION}"
              echo "   This looks like a production version!"
              echo "   Either add a suffix or use tag_release=true for production"
              exit 1
            fi
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "docker_version=${DOCKER_VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Version: ${VERSION} (Docker: ${DOCKER_VERSION})"

      - name: Determine Docker tags
        id: tags
        run: |
          DOCKER_VERSION="${{ steps.version.outputs.docker_version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

          # Build tag list based on context
          TAGS="${IMAGE}:${DOCKER_VERSION}"

          # Add 'latest' tag for stable releases (when tag_release is true)
          if [[ "${{ github.event.inputs.tag_release }}" == "true" ]] && [[ ! "${DOCKER_VERSION}" =~ - ]]; then
            TAGS="${TAGS},${IMAGE}:latest"
          fi

          # Add SHA tag for traceability
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            TAGS="${TAGS},${IMAGE}:sha-${GITHUB_SHA::8}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Tags: ${TAGS}"

      - name: Determine if should push
        id: push
        run: |
          # Use workflow input for push decision
          SHOULD_PUSH="${{ github.event.inputs.push }}"

          echo "should_push=${SHOULD_PUSH}" >> $GITHUB_OUTPUT
          echo "üöÄ Push to registry: ${SHOULD_PUSH}"

  build:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write  # For attestations
    steps:
      - uses: actions/checkout@v4

      - name: Pre-build security check
        run: |
          echo "üîç Checking source for sensitive files..."

          # Check for .env files (except .env.example)
          if find . -name ".env" -not -name ".env.example" | grep .; then
            echo "‚ùå ERROR: Found .env file in source!"
            echo "Remove it or add to .dockerignore"
            exit 1
          fi

          # Check .dockerignore exists and has key entries
          if [ ! -f .dockerignore ]; then
            echo "‚ö†Ô∏è  WARNING: No .dockerignore file found"
          else
            echo "‚úÖ .dockerignore found, checking contents..."
            for pattern in ".env" ".git" "*.key" "*.pem" "*.p12" ".DS_Store"; do
              if ! grep -q "$pattern" .dockerignore; then
                echo "‚ö†Ô∏è  WARNING: Consider adding '$pattern' to .dockerignore"
              fi
            done
          fi

          echo "‚úÖ Pre-build security check completed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: needs.validate.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-,format=short

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ needs.validate.outputs.should_push == 'true' }}
          tags: ${{ needs.validate.outputs.docker_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Security scan - Check for secrets
        run: |
          echo "üîç Scanning image for secrets and sensitive data..."

          # Determine which image to scan based on push mode
          if [[ "${{ needs.validate.outputs.should_push }}" == "true" ]]; then
            # FOR true/false AND true/true: Image was pushed to registry with full path
            IMAGE_TO_SCAN="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}"
            echo "Pulling pushed image: ${IMAGE_TO_SCAN}"
            docker pull "${IMAGE_TO_SCAN}"
          else
            # FOR false/false ONLY: buildx --load doesn't use registry prefix locally
            IMAGE_TO_SCAN="${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}"
            echo "Using locally built image: ${IMAGE_TO_SCAN} (no registry prefix for local build)"
          fi

          # Check for common secret patterns
          docker run --rm --entrypoint sh "${IMAGE_TO_SCAN}" -c '
            echo "Checking for .env files..."
            if find / -name ".env" -o -name "*.env" 2>/dev/null | grep -v "\.env\.example" | grep .; then
              echo "‚ùå ERROR: Found .env files in image!"
              exit 1
            fi

            echo "Checking for private keys..."
            if find / -name "*.pem" -o -name "*.key" -o -name "*_rsa" -o -name "*_dsa" -o -name "*_ecdsa" -o -name "*_ed25519" 2>/dev/null | grep -v "/usr/lib" | grep -v "/lib" | grep .; then
              echo "‚ö†Ô∏è  WARNING: Found potential private key files - please verify these are examples only"
            fi

            echo "Checking for AWS credentials..."
            if grep -r "AKIA[0-9A-Z]\{16\}" / --exclude-dir=/proc --exclude-dir=/sys 2>/dev/null; then
              echo "‚ùå ERROR: Found potential AWS access keys!"
              exit 1
            fi

            echo "Checking for common token patterns..."
            if grep -rE "(api[_-]?key|api[_-]?token|auth[_-]?token|access[_-]?token|secret[_-]?key)\s*=\s*[\"'\''][^\"'\'']{20,}" / --exclude-dir=/proc --exclude-dir=/sys --exclude-dir=/usr/lib --exclude-dir=/lib 2>/dev/null | grep -v example | grep -v test | grep -v demo; then
              echo "‚ö†Ô∏è  WARNING: Found potential API tokens - please verify these are safe"
            fi

            echo "‚úÖ Security scan completed"
          '

      # Attestation disabled for private repos on free plan
      # Uncomment when repository is public or on paid plan
      # - name: Generate attestation
      #   if: needs.validate.outputs.should_push == 'true' && github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     subject-digest: ${{ steps.build.outputs.digest }}
      #     push-to-registry: true

  verify:
    needs: [validate, build]
    if: needs.validate.outputs.should_push == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify image
        run: |
          # Pull and verify the image exists
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version != 'main' && needs.validate.outputs.version || 'main' }}"
          echo "üîç Verifying image: ${IMAGE}"

          # Pull the image (now authenticated for private repos)
          docker pull "${IMAGE}"

          # Basic smoke test
          docker run --rm "${IMAGE}" sh -c "ls -la /app/licenses/ && echo '‚úÖ License files present'"

          echo "‚úÖ Image verification successful"

  create-release:
    needs: [validate, build, verify]
    if: github.event.inputs.tag_release == 'true' && github.event.inputs.push == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

          # Check if release already exists
          if gh release view "v${VERSION}" &>/dev/null; then
            echo "‚úÖ Release v${VERSION} already exists"
          else
            echo "üì¶ Creating release v${VERSION}..."

            # Create release notes
            cat > release_notes.md << EOF
          ## AgentSystems Control Plane ${VERSION}

          ### Docker Images
          \`\`\`bash
          # Pull the image
          docker pull ${IMAGE}:${VERSION#v}
          docker pull ${IMAGE}:latest

          # Run the control plane
          docker run -d \\
            --name agent-control-plane \\
            -p 8080:8080 \\
            -v /var/run/docker.sock:/var/run/docker.sock \\
            ${IMAGE}:${VERSION#v}
          \`\`\`

          ### What's Changed
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

          ### Container Registry
          - GHCR: https://github.com/${{ github.repository }}/pkgs/container/agent-control-plane
          EOF

            # Create the release
            gh release create "v${VERSION}" \
              --title "v${VERSION}" \
              --notes-file release_notes.md \
              --target ${{ github.sha }}

            echo "‚úÖ Release created successfully"
          fi

  summary:
    if: always()
    needs: [validate, build, verify]
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`${{ needs.validate.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Push to registry: ${{ needs.validate.outputs.should_push }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.validate.outputs.should_push }}" == "true" ]]; then
            echo "### Published Images" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.validate.outputs.docker_tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            echo "### Pull Commands" >> $GITHUB_STEP_SUMMARY
            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            VERSION="${{ needs.validate.outputs.version }}"
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            if [[ "${VERSION}" == v* ]]; then
              echo "docker pull ${IMAGE}:${VERSION#v}" >> $GITHUB_STEP_SUMMARY
              echo "docker pull ${IMAGE}:latest" >> $GITHUB_STEP_SUMMARY
            else
              echo "docker pull ${IMAGE}:${VERSION}" >> $GITHUB_STEP_SUMMARY
            fi
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate.result }} ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }} ‚úÖ" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.validate.outputs.should_push }}" == "true" ]]; then
            echo "- Verify: ${{ needs.verify.result }} ‚úÖ" >> $GITHUB_STEP_SUMMARY
          fi
